<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on 西瓜不甜</title>
    <link>https://xgbt.github.io/categories/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on 西瓜不甜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 13 Apr 2022 21:31:05 +0800</lastBuildDate><atom:link href="https://xgbt.github.io/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>geeCache项目笔记</title>
      <link>https://xgbt.github.io/post/geecache/</link>
      <pubDate>Wed, 13 Apr 2022 21:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/geecache/</guid>
      <description>LRU缓存淘汰策略 LRU 认为，如果数据最近被访问过，那么将来被访问的概率也会更高。LRU 算法的实现非常简单，维护一个队列，如果某条记录被访问了，</description>
    </item>
    
    <item>
      <title>geeWeb项目笔记</title>
      <link>https://xgbt.github.io/post/geeweb/</link>
      <pubDate>Thu, 24 Mar 2022 21:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/geeweb/</guid>
      <description>上下文 Context 对Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter。 但是这两个对象提供的接口</description>
    </item>
    
    <item>
      <title>算法模版</title>
      <link>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</link>
      <pubDate>Mon, 28 Feb 2022 21:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/</guid>
      <description>拓扑排序 位运算 __builtin_popcount(x) 求x二进制下有多少个1 vector 在首尾插入元素 v.insert(v.begin(), num); v.push_back(num); map 判断元素x是否存在 if (mp.count(x)) if (mp.find(x) != mp.end()) 技巧 判断质数 1 2 3 4 5 6 7 8 9 10 11 bool isPrime(int x) { if (x &amp;lt;</description>
    </item>
    
    <item>
      <title>学习笔记</title>
      <link>https://xgbt.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Jan 2022 21:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>八股文聚合 https://github.com/CyC2018/CS-Notes JavaGuide 这个内容更详细一点 JavaLearn 算法 CodeTop 分类刷题 https://github.com/labuladong/fucking-algorithm Golang 学习 ✔ Go指南 官方入门教程 https://go.dev/doc/ 官方文档 ✔ 《The Go Programming Language》 入门电子书 ✔ Gola</description>
    </item>
    
    <item>
      <title>多路归并问题</title>
      <link>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6/</link>
      <pubDate>Thu, 13 Jan 2022 14:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6/</guid>
      <description>373. 查找和最小的 K 对数字 给定两个以 升序排列 的整数数组 nums1 和 nums2 , 以及一个整数 k 。 定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自</description>
    </item>
    
    <item>
      <title>字典树问题</title>
      <link>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E6%A0%91/</link>
      <pubDate>Tue, 28 Dec 2021 14:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E6%A0%91/</guid>
      <description>472. 连接词 给你一个 不含重复 单词的字符串数组 words ，请你找出并返回 words 中的所有 连接词 。 连接词 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串</description>
    </item>
    
    <item>
      <title>状态模式 (State)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 23 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 它允许您在状态更改时更改类的行为。 样例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49</description>
    </item>
    
    <item>
      <title>策略模式 (Strategy)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 22 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 定义一系列算法，让这些算法在运行时可以互换，使得分离算法，符合开闭原则。 样例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>访问者模式 (Vistor)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 21 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 访问者模式可以给一系列对象透明的添加功能，并且把相关代码封装到一个类中。 对象只要预留访问者接口Accept则后期为对象添加功能的时候就不</description>
    </item>
    
    <item>
      <title>模版方法模式 (Template)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 20 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 模版方法模式使用继承机制，把通用步骤和通用方法放到父类中，把具体实现延迟到子类中实现。使得实现符合开闭原则。 如实例代码中通用步骤在父类中</description>
    </item>
    
    <item>
      <title>观察者模式 (Observer)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 20 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 观察者模式用于触发联动。 定义对象之间的依赖关系，以便每当对象更改其状态时，都会通知其所有依赖项。 一个对象的改变会触发其它观察者的相关动作</description>
    </item>
    
    <item>
      <title>备忘录模式 (Memento)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 19 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 备忘录模式用于保存程序内部状态到外部，又不希望暴露内部状态的情形。 程序内部状态使用窄接口传递给外部进行存储，从而不暴露程序实现细节。 何时</description>
    </item>
    
    <item>
      <title>中介者模式 (Mediator)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 17 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 Mediator 模式添加第三方对象（称为中介者）来控制两个对象（称为同事）之间的交互。它有助于减少彼此通信的类之间的耦合。因为现在他们不需要了解彼此的</description>
    </item>
    
    <item>
      <title>迭代器模式 (Iterator)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 16 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 迭代器模式用于使用相同方式送代不同类型集合或者隐藏集合类型的具体实现。 何时使用？ 可以使用迭代器模式使遍历同时应用送代策略，如请求新对象、</description>
    </item>
    
    <item>
      <title>Golang的错误处理</title>
      <link>https://xgbt.github.io/post/golang/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 15 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/golang/go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>异常（panic）和错误（error） panic panic会中止程序执行进入异常处理逻辑，panic可以在当前函数或者调用链向上的任何一层被defe</description>
    </item>
    
    <item>
      <title>命令模式 (Command)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 15 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。 除了配置灵活外，使用命令模式还可以用作： 批处理 任务队列 undo, redo 等把具体</description>
    </item>
    
    <item>
      <title>责任链模式 (Chain of Responsibility)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 14 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 职责链模式用于分离不同职责，并且动态组合相关职责。 构建一条对象链，请求从一端进入并不断从一个对象到另一个对象，直到找到合适的处理程序。 何</description>
    </item>
    
    <item>
      <title>代理模式 (Proxy)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 13 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 使用代理模式，一个类代表另一个类的功能。 代理模式的常见用法有： 虚代理 COW代理 远程代理 保护代理 Cache 代理 防火墙代理 同步代理 智能指引 何时使用 代</description>
    </item>
    
    <item>
      <title>享元模式 (Flyweight)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 12 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 它用于通过尽可能多地与相似对象共享来最小化内存使用或计算开销。 享元模式从对象中剥离出不发生改变且多个实例需要的重复数据，独立出一个享元，</description>
    </item>
    
    <item>
      <title>SOLID原则简介</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/solid%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sat, 11 Dec 2021 21:12:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/solid%E5%8E%9F%E5%88%99/</guid>
      <description>1. 单一职责原则 单一职责原则 Single Responsibility Principle &amp;ldquo;There should never be more than one reason for a class to change.&amp;rdquo; — Robert Martin. 一个类应该只有一个发生变化的原因 一个类应该专注做一件事 SRP原则具体指一个类</description>
    </item>
    
    <item>
      <title>外观模式 (Facade)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 11 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 外观模式为复杂的子系统提供了一个简化的接口。 何时使用 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个&amp;quot;接待员&amp;qu</description>
    </item>
    
    <item>
      <title>装饰模式 (Decorator)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 10 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 装饰模式使用对象组合的方式动态改变或增加对象行为。 允许程序员通过将对象包装在「装饰器类的对象」中，在运行时动态更改对象的行为。 何时使用 在</description>
    </item>
    
    <item>
      <title>组合模式 (Composite)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 09 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 组合模式统一对象，使得客户端使用相同接口处理各个对象。 组合模式常用于树状结构，用于统一叶子节点和树节点的访问，并且可以用于应用某一操作到</description>
    </item>
    
    <item>
      <title>桥接模式 (Bridge)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 08 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 桥接模式分离抽象部分和实现部分，使得两部分独立扩展。 策略模式使抽象部分和实现部分分离，可以独立变化。 桥接模式类似于策略模式，区别在于策略</description>
    </item>
    
    <item>
      <title>适配器模式 (Adapter)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 07 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 适配器模式用于转换一种接口适配另一种接口。 何时使用 系统需要使用现有的类，而此类的接口不符合系统的需要。 想要建立一个可以重复使用的类，用于</description>
    </item>
    
    <item>
      <title>单例模式 (Singleton)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 06 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 确保只创建特定类的一个对象，比如数据库连接类。 使用懒惰模式的单例模式，Java使用双重检查加锁保证线程安全。 Golang Go中可以使用Once.D</description>
    </item>
    
    <item>
      <title>原型模式 (Prototype)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 05 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 简单说，创建现有对象的副本并根据需要对其进行修改。 原型模式配合原型管理器使用，使得客户端在不知道具体类的情况下，通过接口管理器得到新的实</description>
    </item>
    
    <item>
      <title>建造者模式 (Builder)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 在构建对象的时候，避免构造函数参数污染。一步一步构造出复杂的对象。 与工厂方法模式的区别是：建造者模式更加构建的顺序。 换句话说，当构建过程</description>
    </item>
    
    <item>
      <title>抽象工厂模式 (Abstract Factory)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 03 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 抽象工厂模式用于生成产品族的工厂，所生成的对象是有关联的。 如果抽象工厂退化成生成的对象无关联则成为工厂方法模式。 何时使用？ 当生成的对象存</description>
    </item>
    
    <item>
      <title>工厂方法模式 (Factory Method)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 02 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 工厂方法模式将「实例化逻辑」委托给子类实现。 实例化一个对象，是通过调用工厂方法，而不是通过调用构造函数来完成的。 何时使用？ 当客户端不知道</description>
    </item>
    
    <item>
      <title>简单工厂模式 (Simple Factory)</title>
      <link>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 01 Dec 2021 16:29:53 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>定义 简单工厂只为客户端生成一个实例，而不向客户端暴露任何实例化的逻辑。 何时使用？ 当创建一个对象不仅仅是几个赋值并且涉及一些逻辑时，此时适合采</description>
    </item>
    
    <item>
      <title>子序列问题</title>
      <link>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 26 Jul 2021 14:31:05 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</guid>
      <description>1143. 最长公共子序列 给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。 方法1：动态规划，$dp</description>
    </item>
    
    <item>
      <title>剑指Offer</title>
      <link>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87/</link>
      <pubDate>Fri, 09 Jul 2021 14:28:20 +0800</pubDate>
      
      <guid>https://xgbt.github.io/post/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87/</guid>
      <description>03. 数组中重复的数字★ 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个</description>
    </item>
    
  </channel>
</rss>

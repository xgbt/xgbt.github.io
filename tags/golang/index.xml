<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on xgbt&#39;s Blog</title>
    <link>xgbt.site/tags/golang/</link>
    <description>Recent content in Golang on xgbt&#39;s Blog</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Feb 2024 16:09:19 +0800</lastBuildDate>
    <atom:link href="xgbt.site/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 标准库丨sync</title>
      <link>xgbt.site/tech/golang/golang-%E6%A0%87%E5%87%86%E5%BA%93-sync/</link>
      <pubDate>Tue, 13 Feb 2024 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-%E6%A0%87%E5%87%86%E5%BA%93-sync/</guid>
      <description>1. WaitGroup WaitGroup 等待一组 Goroutine 完成。主 Goroutine 调用 Add(delta) 来设置要等待的 Goroutine 的数量。然后每个 Goroutine 运行并在完成时调用 Done()。同时，可以使用 Wait() 来阻塞，直到所有 Goroutine 完成。 1type</description>
    </item>
    <item>
      <title>Golang Defer</title>
      <link>xgbt.site/tech/golang/golang-defer/</link>
      <pubDate>Sun, 11 Feb 2024 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-defer/</guid>
      <description>1. 基础特性 1.1 先进后出 对于多个defer语句，类似栈，按先进后出的顺序执行。 1func main() { 2 var whatever [5]struct{} 3 for i := range whatever { 4 defer fmt.Print(i) 5 } 6} 7 8// 43210 1.2 实时解析函数参数 1package</description>
    </item>
    <item>
      <title>Golang template 跳过 HTML 转义</title>
      <link>xgbt.site/tech/golang/golang-template-%E8%B7%B3%E8%BF%87-html-%E8%BD%AC%E4%B9%89/</link>
      <pubDate>Mon, 11 Dec 2023 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-template-%E8%B7%B3%E8%BF%87-html-%E8%BD%AC%E4%B9%89/</guid>
      <description>使用golang标准库中的html/template时，在默认情况下渲染模版时为了安全等原因，会将字符串中的部分符号进行转义。 注册自定义转义</description>
    </item>
    <item>
      <title>Golang 控制协程并发数量</title>
      <link>xgbt.site/tech/golang/golang-%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/</link>
      <pubDate>Mon, 07 Aug 2023 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/</guid>
      <description>并发过高导致程序崩溃 1func main() { 2 var wg sync.WaitGroup 3 for i := 0; i &amp;lt; math.MaxInt32; i++ { 4 wg.Add(1) 5 go func(i int) { 6 defer wg.Done() 7 fmt.Println(i) 8 time.Sleep(time.Second) 9 }(i) 10 } 11 wg.Wait() 12} 1goroutine 1489841 [running]: 2internal/poll.(*fdMutex).rwlock(0xc000130060, 0x0?) 3 /usr/local/go/src/internal/poll/fd_mutex.go:147 +0x11b 4internal/poll.(*FD).writeLock(...) 5 /usr/local/go/src/internal/poll/fd_mutex.go:239 6internal/poll.(*FD).Write(0xc000130060, {0xc0ca328a90, 0x8, 0x8}) 7 /usr/local/go/src/internal/poll/fd_unix.go:370 +0x72 8os.(*File).write(...) 9 /usr/local/go/src/os/file_posix.go:48 10os.(*File).Write(0xc00012e008,</description>
    </item>
    <item>
      <title>Golang Channel 使用场景</title>
      <link>xgbt.site/tech/golang/golang-channel-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Thu, 03 Aug 2023 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-channel-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>1. future/promise 1.1 单向接收 Channel 作为函数返回 sumSquares函数调用的两个实参请求并发进行。每个通道读取操作将阻塞到请求返回结果为止。 1func longTimeRequest() &amp;lt;-chan int64 { 2 r := make(chan</description>
    </item>
    <item>
      <title>Golang Code Review Comments</title>
      <link>xgbt.site/tech/golang/golang-code-review-comments/</link>
      <pubDate>Sat, 06 May 2023 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-code-review-comments/</guid>
      <description>参考资料： https://go.dev/wiki/CodeReviewComments https://go.dev/wiki/CommonMistakes Review Comments 使用 gofmt 或者 goimports 自动格式化代码 记录声明的注释应该是完整的句子，注释应以所描述事物的名称开头并以句点结束。 1// Request represents a request to run a command. 2type Request</description>
    </item>
    <item>
      <title>Golang 错误处理</title>
      <link>xgbt.site/tech/golang/golang-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 11 Feb 2023 16:09:19 +0800</pubDate>
      <guid>xgbt.site/tech/golang/golang-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>1. panic 与 error 1.1 panic panic 会中止程序执行进入异常处理逻辑，panic可以在当前函数或者调用链向上的任何一层被defer recover 捕获处理，没被捕获的panic会</description>
    </item>
  </channel>
</rss>
